MEMORY
{
    LR_RAM : ORIGIN = 0x81050000, LENGTH = 0x00040000
    ER_IRAM_BEGIN : ORIGIN = 0x40000000, LENGTH = 0x40
    ER_RAM_BEGIN : ORIGIN = 0x810A0000, LENGTH = 0x50000
    STACK : ORIGIN = 0x810FC000, LENGTH = 0x3FF8 + 4
}
ENTRY(EntryPoint)
SECTIONS
{
    ER_RAM  :
    {
        * (i.EntryPoint)
        * (SectionForBootstrapOperations)
        * (i.*)
        * (.text*)
        * (.constdata*)
        * (.conststring*)
        * (.glue*)
    }>LR_RAM
    ER_IRAM  :
    {
        * (VectorsTrampolines)
    }>ER_IRAM_BEGIN AT>LR_RAM
    ER_RAM_RO  : ALIGN(0x10)
    {
        * (.rodata*)
        * (rodata)
        * (SectionForFlashOperations)
        PROVIDE(_sbrk = .);
        PROVIDE(_write = .);
        PROVIDE(_close = .);
        PROVIDE(_fstat = .);
        PROVIDE(_lseek = .);
        PROVIDE(_read = .);
        PROVIDE(_exit = .);
        PROVIDE(_getpid = .);
        PROVIDE(_kill = .);
        PROVIDE(abort = .);
        PROVIDE(__errno = .);
        PROVIDE(_read = .);
        PROVIDE(isatty = .);
        PROVIDE(_isatty = .);
        LONG(0xE12FFF1E); 
    }>ER_RAM_BEGIN AT>LR_RAM
    ER_RAM_RW  : ALIGN(0x10)
    {
        * (rwdata)
        * (.data*)
    }>ER_RAM_BEGIN AT>LR_RAM
    .bss  : ALIGN(0x10)
    {
        * (.zidata*)
        * (.bss*)
        PROVIDE(__exidx_start = .);
        PROVIDE(__exidx_end = .);
    }>ER_RAM_BEGIN 
    /DISCARD/  :
    {
        * (.ARM.exidx*)
        * (.ARM.extab*)
    }
    ER_STACK_BOTTOM 0x810FC000 :
    {
        * (SectionForStackBottom)
    }
    ER_STACK_TOP 0x810FFFF8 :
    {
        * (SectionForStackTop)
    }
}
Load$$ER_RAM$$Base = ADDR(ER_RAM);
Image$$ER_RAM$$Length = SIZEOF(ER_RAM);
Image$$ER_RAM_RO$$Base = ADDR(ER_RAM_RO);
Image$$ER_RAM_RO$$Length = SIZEOF(ER_RAM_RO);
Load$$ER_RAM_RO$$Base = LOADADDR(ER_RAM_RO);
Image$$ER_RAM_RW$$Base = ADDR(ER_RAM_RW);
Image$$ER_RAM_RW$$Length = SIZEOF(ER_RAM_RW);
Load$$ER_RAM_RW$$Base = LOADADDR(ER_RAM_RW) ;
Image$$ER_RAM_RW$$ZI$$Base = ADDR(.bss);
Image$$ER_RAM_RW$$ZI$$Length = SIZEOF(.bss);
Image$$ER_IRAM$$Base = ADDR(ER_IRAM);
Image$$ER_IRAM$$Length = SIZEOF(ER_IRAM);
Load$$ER_IRAM$$Base = LOADADDR(ER_IRAM);
__use_no_semihosting_swi = 0;
