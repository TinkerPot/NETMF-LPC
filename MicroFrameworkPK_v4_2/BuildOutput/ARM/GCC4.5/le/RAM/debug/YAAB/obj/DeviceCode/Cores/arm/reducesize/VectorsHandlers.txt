ARM GAS  C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s 			page 1


   1              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   2              	@ Copyright (c) Microsoft Corporation.  All rights reserved.
   3              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   4              	
   5              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   6              	
   7              	    .global UNDEF_SubHandler
   8              	    .global ABORTP_SubHandler
   9              	    .global ABORTD_SubHandler
  10              	
  11              	    .extern UNDEF_Handler               @ void UNDEF_Handler  (unsigned int*, unsigned int, unsigne
  12              	    .extern ABORTP_Handler              @ void ABORTP_Handler (unsigned int*, unsigned int, unsigne
  13              	    .extern ABORTD_Handler              @ void ABORTD_Handler (unsigned int*, unsigned int, unsigne
  14              	
  15              	    .global HARD_Breakpoint
  16              	    .extern HARD_Breakpoint_Handler     @ HARD_Breakpoint_Handler(unsigned int*, unsigned int, unsi
  17              	
  18              	    .extern StackBottom
  19              	    .extern StackOverflow               @ StackOverflow(unsigned int)
  20              	
  21              	
  22              	
  23              	    .ifdef FIQ_SAMPLING_PROFILER
  24              	        LEAVE_IRQ_DISABLED = 1
  25              	    .endif
  26              	
  27              	    .ifdef FIQ_LATENCY_PROFILER
  28              	        LEAVE_IRQ_DISABLED = 1
  29              	    .endif
  30              	
  31              	.ifdef LEAVE_IRQ_DISABLED
  32              	
  33              	    @ here we always leave the IRQ disabled, FIQ enabled for profiling
  34              	
  35              	PSR_MODE_USER       =   0x90
  36              	PSR_MODE_FIQ        =   0x91
  37              	PSR_MODE_IRQ        =   0x92
  38              	PSR_MODE_SUPERVISOR =   0x93
  39              	PSR_MODE_ABORT      =   0x97
  40              	PSR_MODE_UNDEF      =   0x9B
  41              	PSR_MODE_SYSTEM     =   0x9F
  42              	
  43              	.else
  44              	
  45              	    @ here we always leave the IRQ disabled, FIQ disabled for safety
  46              	
  47              	PSR_MODE_USER       =   0xD0
  48              	PSR_MODE_FIQ        =   0xD1
  49              	PSR_MODE_IRQ        =   0xD2
  50              	PSR_MODE_SUPERVISOR =   0xD3
  51              	PSR_MODE_ABORT      =   0xD7
  52              	PSR_MODE_UNDEF      =   0xDB
  53              	PSR_MODE_SYSTEM     =   0xDF
  54              	
  55              	.endif
  56              	
  57              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ARM GAS  C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s 			page 2


  58              	
  59              	@ the UNDEF Instruction conditions on the ARM7TDMI are catastrophic, so there is no return, but it 
  60              	
  61              	    .section    .text.UNDEF_SubHandler, "xa", %progbits
  62              	
  63              	  .ifdef COMPILE_THUMB
  64              		.arm
  65              	  .endif
  66              	
  67              	UNDEF_SubHandler:
  68              	@ on entry, were are in UNDEF mode, without a usable stack
  69 0000 04002DE5 	    stmfd   r13!, {r0}                  @ store the r0 at undef stack first
  70 0004 00004FE1 	    mrs     r0, spsr                    @ get the previous mode.
  71 0008 C00080E3 	    orr     r0, r0, #0xC0               @ keep interrupts disabled.
  72 000c 00F021E1 	    msr     cpsr_c, r0                  @ go back to the previous mode.
  73              	  
  74 0010 FE1F2DE9 	    stmfd   r13!, {r1-r12}              @ push unbanked registers on the stack
  75 0014 DBF021E3 	    msr     cpsr_c, #PSR_MODE_UNDEF     @ go back into UNDEF mode, but keep IRQs off
  76 0018 0030A0E1 	    mov     r3,r0
  77 001c 00004FE1 	    mrs     r0, spsr                    @ now save the spsr_UNDEF register
  78 0020 0E10A0E1 	    mov     r1, r14                     @ now save the r14_UNDEF  register
  79 0024 04209DE4 	    LDMFD   r13!,{r2}                   @ r2 <= previous r0
  80              	
  81 0028 03F021E1 	    msr     cpsr_c, r3                  @ go back to the previous mode.
  82 002c 07002DE9 	    stmfd   r13!, {r0-r2}               @ push spsr_UNDEF and r14_UNDEF on stack and the old r0 val
  83              	
  84 0030 0D00A0E1 	    mov     r0, r13                     @ ARG1 of handler: the stack location of registers
  85 0034 3C108DE2 	    add     r1, r13, #60                @ ARG2 of handler: SYSTEM mode stack at time of exception (
  86 0038 0E20A0E1 	    mov     r2, r14                     @ ARG3 of handler: get the link register of SYSTEM mode: r1
  87              	
  88 003c 04F01FE5 	    ldr     pc,UNDEF_Handler_Ptr        @ address of vector routine in C to jump to, never expect t
  89              	
  90              	UNDEF_Handler_Ptr:
  91 0040 00000000 	    .word   UNDEF_Handler
  92              	
  93              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  94              	
  95              	@ the ABORT conditions on the ARM7TDMI are catastrophic, so there is no return, but it is supported
  96              	
  97              	    .section    .text.ABORTP_SubHandler, "xa", %progbits
  98              	
  99              	  .ifdef COMPILE_THUMB
 100              		.arm
 101              	  .endif
 102              	
 103              	ABORTP_SubHandler:
 104              	    @ on entry, were are in ABORT mode, without a usable stack
 105              	
 106 0000 04002DE5 	    stmfd   r13!, {r0}                  @ store the r0 at undef stack first
 107 0004 00004FE1 	    mrs     r0, spsr                    @ get the previous mode.
 108 0008 C00080E3 	    orr     r0, r0, #0xC0               @ keep interrupts disabled.
 109 000c 00F021E1 	    msr     cpsr_c, r0                  @ go back to the previous mode.
 110              	  
 111 0010 FE1F2DE9 	    stmfd   r13!, {r1-r12}              @ push unbanked registers on the stack
 112 0014 D7F021E3 	    msr     cpsr_c, #PSR_MODE_ABORT     @ go back into ABORT mode, but keep IRQs off
 113 0018 0030A0E1 	    mov     r3,r0
 114 001c 00004FE1 	    mrs     r0, spsr                    @ now save the spsr_ABORT register
ARM GAS  C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s 			page 3


 115 0020 0E10A0E1 	    mov     r1, r14                     @ now save the r14_ABORT  register
 116 0024 04209DE4 	    LDMFD   r13!,{r2}                   @ r2 <= previous r0
 117              	
 118 0028 03F021E1 	    msr     cpsr_c, r3                  @ go back to the previous mode.
 119 002c 07002DE9 	    stmfd   r13!, {r0-r2}               @ push spsr_ABORT and r14_ABORT on stack and the old r0 val
 120              	
 121 0030 0D00A0E1 	    mov     r0, r13                     @ ARG1 of handler: the stack location of registers
 122 0034 3C108DE2 	    add     r1, r13, #60                @ ARG2 of handler: SYSTEM mode stack at time of exception (
 123 0038 0E20A0E1 	    mov     r2, r14                     @ ARG3 of handler: get the link register of SYSTEM mode: r1
 124              	
 125 003c 04F01FE5 	    ldr     pc,ABORTP_Handler_Ptr       @ address of vector routine in C to jump to, never expect t
 126              	
 127              	ABORTP_Handler_Ptr:
 128 0040 00000000 	    .word   ABORTP_Handler
 129              	
 130              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 131              	
 132              	    .section    .text.ABORTD_SubHandler, "xa", %progbits
 133              	
 134              	  .ifdef COMPILE_THUMB
 135              		.arm
 136              	  .endif
 137              		
 138              	ABORTD_SubHandler:
 139              	    @ on entry, were are in ABORT mode, without a usable stack
 140              	
 141 0000 04002DE5 	    stmfd   r13!, {r0}                  @ store the r0 at undef stack first
 142 0004 00004FE1 	    mrs     r0, spsr                    @ get the previous mode.
 143 0008 C00080E3 	    orr     r0, r0, #0xC0               @ keep interrupts disabled.
 144 000c 00F021E1 	    msr     cpsr_c, r0                  @ go back to the previous mode.
 145              	  
 146 0010 FE1F2DE9 	    stmfd   r13!, {r1-r12}              @ push unbanked registers on the stack
 147 0014 D7F021E3 	    msr     cpsr_c, #PSR_MODE_ABORT     @ go back into ABORT mode, but keep IRQs off
 148 0018 0030A0E1 	    mov     r3,r0
 149 001c 00004FE1 	    mrs     r0, spsr                    @ now save the spsr_ABORT register
 150 0020 0E10A0E1 	    mov     r1, r14                     @ now save the r14_ABORT  register
 151 0024 04209DE4 	    LDMFD   r13!,{r2}                   @ r2 <= previous r0
 152              	
 153 0028 03F021E1 	    msr     cpsr_c, r3                  @ go back to the previous mode.
 154 002c 07002DE9 	    stmfd   r13!, {r0-r2}               @ push spsr_ABORT and r14_ABORT on stack and the old r0 val
 155              	
 156 0030 0D00A0E1 	    mov     r0, r13                     @ ARG1 of handler: the stack location of registers
 157 0034 3C108DE2 	    add     r1, r13, #60                @ ARG2 of handler: SYSTEM mode stack at time of exception (
 158 0038 0E20A0E1 	    mov     r2, r14                     @ ARG3 of handler: get the link register of SYSTEM mode: r1
 159              	
 160 003c 04F01FE5 	    ldr     pc,ABORTD_Handler_Ptr       @ address of vector routine in C to jump to, never expect t
 161              	
 162              	ABORTD_Handler_Ptr:
 163 0040 00000000 	    .word   ABORTD_Handler
 164              	
 165              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 166              	
 167              	    .section    .text.HARD_Breakpoint, "xa", %progbits
 168              	
 169              	  .ifdef COMPILE_THUMB
 170              		.arm
 171              	  .endif
ARM GAS  C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s 			page 4


 172              		
 173              	HARD_Breakpoint:
 174              	    @ on entry, were are being called from C/C++ in system mode
 175              	
 176 0000 DFF021E3 	    msr     cpsr_c, #PSR_MODE_SYSTEM    @ go into SYSTEM mode, giving us a usable stack, but keep I
 177 0004 FF1F2DE9 	    stmfd   r13!, {r0-r12}              @ push unbanked registers on the stack
 178 0008 00000FE1 	    mrs     r0, cpsr                    @ now save the cpsr_SYSTEM register
 179 000c 0E10A0E1 	    mov     r1, r14                     @ now save the r14_SYSTEM  register
 180 0010 03002DE9 	    stmfd   r13!, {r0-r1}               @ push spsr_ABORT and r14_ABORT on stack
 181              	
 182 0014 0D00A0E1 	    mov     r0, r13                     @ ARG1 of handler: the stack location of registers
 183 0018 3C108DE2 	    add     r1, r13, #60                @ ARG2 of handler: SYSTEM mode stack at time of call (witho
 184 001c 0E20A0E1 	    mov     r2, r14                     @ ARG3 of handler: get the link register of SYSTEM mode: r1
 185              	
 186 0020 04F01FE5 	    ldr     pc,HARD_Breakpoint_Handler_Ptr @ address of vector routine in C to jump to, never expec
 187              	
 188              	HARD_Breakpoint_Handler_Ptr:
 189 0024 00000000 	    .word   HARD_Breakpoint_Handler
 190              	
 191              	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 192              	
 193              	  .ifdef COMPILE_THUMB
 194              		.thumb
 195              	  .endif
 196              	
 197              	
 198              	
 199              	
 200              		
 201              		
 202              		
ARM GAS  C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 BUILD_RTM
                            *ABS*:00000001 TARGETLOCATION_RAM
                            *ABS*:00000001 HAL_REDUCESIZE
                            *ABS*:00000001 PLATFORM_ARM_YAAB
                            *ABS*:00000001 PLATFORM_ARM_LPC22XX
                            *ABS*:00000001 COMPILE_ARM
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:67     .text.UNDEF_SubHandler:00000000 UNDEF_SubHandler
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:103    .text.ABORTP_SubHandler:00000000 ABORTP_SubHandler
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:138    .text.ABORTD_SubHandler:00000000 ABORTD_SubHandler
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:173    .text.HARD_Breakpoint:00000000 HARD_Breakpoint
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:47     *ABS*:000000d0 PSR_MODE_USER
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:48     *ABS*:000000d1 PSR_MODE_FIQ
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:49     *ABS*:000000d2 PSR_MODE_IRQ
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:50     *ABS*:000000d3 PSR_MODE_SUPERVISOR
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:51     *ABS*:000000d7 PSR_MODE_ABORT
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:52     *ABS*:000000db PSR_MODE_UNDEF
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:53     *ABS*:000000df PSR_MODE_SYSTEM
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:69     .text.UNDEF_SubHandler:00000000 $a
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:90     .text.UNDEF_SubHandler:00000040 UNDEF_Handler_Ptr
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:91     .text.UNDEF_SubHandler:00000040 $d
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:106    .text.ABORTP_SubHandler:00000000 $a
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:127    .text.ABORTP_SubHandler:00000040 ABORTP_Handler_Ptr
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:128    .text.ABORTP_SubHandler:00000040 $d
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:141    .text.ABORTD_SubHandler:00000000 $a
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:162    .text.ABORTD_SubHandler:00000040 ABORTD_Handler_Ptr
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:163    .text.ABORTD_SubHandler:00000040 $d
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:176    .text.HARD_Breakpoint:00000000 $a
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:188    .text.HARD_Breakpoint:00000024 HARD_Breakpoint_Handler_Ptr
C:\MicroFrameworkPK_v4_2\DeviceCode\cores\arm\AssemblyCode\arm\GNU_S\VectorsHandlers.s:189    .text.HARD_Breakpoint:00000024 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
UNDEF_Handler
ABORTP_Handler
ABORTD_Handler
HARD_Breakpoint_Handler
